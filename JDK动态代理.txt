
1、静态代理
	1）代理类是自己手工实现的，自己创建一个java类，表示代理类。
	2）同时你所要代理的目标类是确定的。
	特点：1.实现简单 2.容易理解
	当项目中，目标类和代理类很多时候，有以下的缺点。
	缺点：1）目标增加了，代理类可能也需要成倍的增加，代理类数量过多。
	      2）当你的接口中功能增加了，或者修改了，会影响众多的实现类，厂家类
	      ，代理类都需要修改。
    1.代理类完成的功能：
	1.目标类中方法的调用
	2.功能增强

2、动态代理
	在静态代理中目标类很多时候，可以使用动态代理，避免静态代理的缺点。
	动态代理中目标类即使很多，1）代理类数量可以很少，2）当你修改了接
	口中的方法时，不会影响代理类。

	动态代理：在程序执行过程中，使用JDK的反射机制，创建代理类对象，并
	动态的指定要代理的目标类。
	换句话说：动态代理是一种创建java对象的能力，让你不用创建具体的类，
	就能创建代理类对象。

	1、什么是动态代理
		使用JDK的反射机制，创建对象的能力，创建的是代理类的对象。而
		不用你创建类文件。不用写java文件。
		动态：在程序执行时，调用JDK提供的方法才能创建代理类的对象。
	2、动态代理能做什么
		1.控制访问，在代理中，控制是否可以调用目标对象的方法
		2.功能增强，可以在完成目标对象的调用时，附加一些额外的功能，
		这些额外的功能叫做功能增强。
		可以在不改变原来目标方法功能的前提下，可以在代理中增强自己的功能代理。
		程序开发中的意思。
		比如：你所在的项目中，有一个功能是其他人（公司的其他部门，其他小组的人）写好的，
		你可以使用。GoNong.class , GoNong gn = new GoNong(), gn.print();
		发现这个功能，现在还缺点，不能完全满足我项目的需要。我需要在gn.print()执行后，需要自己在增加
		代码。用代理实现 gn.print()调用时，增加自己代码，而不用去改原来的GongNong文件。

3、动态代理
	动态代理的实现：1.JDK动态代理：使用java反射包中的类和接口实现动态
	代理的功能。
	反射包 java.lang.reflect,里面有三个类：InvocationHandler,Method,Proxy.

	2.cglib动态代理：cglib是第三方的工具库，创建代理对象。
	cglib的原理是继承，cglib通过继承目标类，创建它的子类，在子类中重写
	父类中同名的方法，实现功能的修改。
	因为cglib是继承，重写方法，所以要求目标类不能是final的，方法也不能是
	final的。cglib的要求目标类比较宽松。

4、JDK动态代理：
   1.反射，Method类，表示方法。类中的方法。通过Method可以执行某个方法。
   2.JDK动态代理的实现
	反射包 java.lang.reflect,里面有三个类：InvocationHandler,Method,
		Proxy.
	1)InvocationHandler接口（调用处理器）：就一个方法invoke()
	  invoke（）：表示代理对象要执行的功能代码。你的代理类要完成的功能就
	  写在invoke（）方法中。

	  代理类完成的功能：1.调用目标方法，执行目标方法的功能
	  2.功能增强，在目标方法调用时，增强功能。

	方法原型
	参数：Object proxy:JDK创建的代理对象，无需赋值。
		Method method：目标类中的方法，JDK提供method对象的
		Object[] args:目标类中方法的参数，JDK提供的。

	public Object invoke(Object proxy,Method method,Object[] args)

	InvocationHandler接口：表示你的代理要干什么。
	怎么用：1、创建类实现接口InvocationHandler
		2、重写invoke（）方法，把原来静态代理中代理类要完成的功能，写在这。

	2）Method类：表示方法的，确切的说就是目标类中的方法。
	作用：通过Method可以执行某个目标类的方法，Method.invoke();
		method.invoke(目标对象，方法的参数)；返回值是一个Object类型。

	说明：method.invoke()就是用来执行目标方法的。

	3）Proxy类：核心的对象，创建代理对象。之前创建对象都是new类的构造方法（）现在我们是使用Proxy
	类的方法，代替new的使用。

	方法：静态方法newProxyInstance()
	作用是：创建代理对象。

	参数：
	1.ClassLoader loader 类加载器，负责向内存中加载对象的。使用反射获取对象的ClassLoader
	 用法：类a，a.getClass().getClassLoader(),目标对象的类加载器

	2.Class<?>[] interfaces:接口，目标对象实现的接口，也是反射获取的。

	3.InvocationHandler h:我们自己写的，代理类要完成的功能。

	返回值：就是代理对象

	public static Object newProxyInstance(ClassLoader loader,Class<?>[] interfaces,InvocationHandler h)

5.实现动态代理的步骤：
	1.创建接口，定义目标类要完成的功能
	2.创建目标类实现接口
	3.创建InvocationHandler接口的实现类，在invoke方法中完成代理类的功能
		1.调用目标方法
		2.增强功能

	4.使用Proxy类的静态方法，创建代理对象。并把返回值转为接口类型

创建动态代理对象：
UseSell proxy = (UseSell)
Proxy.newProxyInstance(
factory.getClass().getClassLoader(),
factory.getClass().getInterface(),
handler);
其中
proxy：是代理对象。是com.sun.proxy.$Proxy类型的
通过代理对象执行方法调用，执行handler proxy.sell(1)，此时执行的是handler中的invoke()方法。

InvocationHandler接口的实现类
public void invoke(代理对象，Method method , Object args[]){执行代理的功能，1.调用目标方法，2.增强功能
1.调用目标方法
  method.invoke(目标对象，args)
2.功能增强

return 返回目标方法执行结果}

没有接口时候需要使用cglib动态代理




	
		
    

 